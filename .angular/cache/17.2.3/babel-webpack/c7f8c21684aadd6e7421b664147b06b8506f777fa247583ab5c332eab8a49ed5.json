{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nlet FormularioComponent = class FormularioComponent {\n  constructor(http, pessoa) {\n    this.http = http;\n    this.pessoa = pessoa;\n    this.pessoas = [];\n    this.form = new FormGroup({\n      nome: new FormControl(\"\", [Validators.required, Validators.minLength(3), Validators.maxLength(30)]),\n      email: new FormControl(\"\", [Validators.required, Validators.email]),\n      senha: new FormControl(\"\", [Validators.required]),\n      cep: new FormControl(\"\", [Validators.required, Validators.minLength(8), Validators.maxLength(8)]),\n      logradouro: new FormControl({\n        value: \"\",\n        disabled: true\n      }, [Validators.required])\n    });\n  }\n  ngOnInit() {}\n  buscarCep(cep) {\n    const url = `https://viacep.com.br/ws/${cep}/json/`;\n    this.http.get(url).subscribe(data => {\n      this.form.get('logradouro')?.setValue(data.logradouro);\n    });\n  }\n  adicionarPessoa() {\n    if (this.form.valid) {\n      const pessoa = {\n        nome: this.form.get('nome').value,\n        email: this.form.get('email').value,\n        senha: this.form.get('senha').value,\n        cep: this.form.get('cep').value,\n        logradouro: this.form.get('logradouro').value\n      };\n      this.pessoas.push(pessoa);\n      this.form.reset();\n    } else {\n      alert('Formulário inválido!');\n    }\n  }\n};\nFormularioComponent = __decorate([Component({\n  selector: 'app-formulario',\n  templateUrl: './formulario.component.html',\n  styleUrls: ['./formulario.component.scss']\n}), __param(1, Inject(MAT_DIALOG_DATA))], FormularioComponent);\nexport { FormularioComponent };","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","MAT_DIALOG_DATA","FormularioComponent","constructor","http","pessoa","pessoas","form","nome","required","minLength","maxLength","email","senha","cep","logradouro","value","disabled","ngOnInit","buscarCep","url","get","subscribe","data","setValue","adicionarPessoa","valid","push","reset","alert","__decorate","selector","templateUrl","styleUrls","__param","Inject"],"sources":["D:\\Aplicativos\\teste front\\código teste\\frontend-test-main\\src\\app\\atividades\\2 - CRUD\\formulario\\formulario.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\ninterface Pessoa {\n  nome: string;\n  email: string;\n  senha: string;\n  cep: string;\n  logradouro: string;\n}\n\n@Component({\n  selector: 'app-formulario',\n  templateUrl: './formulario.component.html',\n  styleUrls: ['./formulario.component.scss'],\n})\nexport class FormularioComponent implements OnInit {\n  pessoas: Pessoa[] = [];\n\n  constructor(private http: HttpClient, @Inject(MAT_DIALOG_DATA) public pessoa: Pessoa) { }\n\n  form = new FormGroup({\n    nome: new FormControl(\"\", [Validators.required, Validators.minLength(3), Validators.maxLength(30)]),\n    email: new FormControl(\"\", [Validators.required, Validators.email]),\n    senha: new FormControl(\"\", [Validators.required]),\n    cep: new FormControl(\"\", [Validators.required, Validators.minLength(8), Validators.maxLength(8)]),\n    logradouro: new FormControl({ value: \"\", disabled: true }, [Validators.required]),\n  });\n\n  ngOnInit(): void {\n  }\n\n  buscarCep(cep: string) {\n    const url = `https://viacep.com.br/ws/${cep}/json/`;\n    this.http.get(url).subscribe((data: any) => {\n      this.form.get('logradouro')?.setValue(data.logradouro);\n    });\n  }\n\n  adicionarPessoa() {\n    if (this.form.valid) {\n      const pessoa: Pessoa = {\n        nome: this.form.get('nome')!.value!,\n        email: this.form.get('email')!.value!,\n        senha: this.form.get('senha')!.value!,\n        cep: this.form.get('cep')!.value!,\n        logradouro: this.form.get('logradouro')!.value!\n      };\n      this.pessoas.push(pessoa);\n\n      this.form.reset();\n    } else {\n      alert('Formulário inválido!');\n    }\n  }\n}\n"],"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AACnE,SAASC,eAAe,QAAQ,0BAA0B;AAenD,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAG9BC,YAAoBC,IAAgB,EAA2BC,MAAqB;IAAhE,KAAAD,IAAI,GAAJA,IAAI;IAA8C,KAAAC,MAAM,GAANA,MAAM;IAF5E,KAAAC,OAAO,GAAa,EAAE;IAItB,KAAAC,IAAI,GAAG,IAAIR,SAAS,CAAC;MACnBS,IAAI,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,EAAEV,UAAU,CAACW,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MACnGC,KAAK,EAAE,IAAId,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACY,KAAK,CAAC,CAAC;MACnEC,KAAK,EAAE,IAAIf,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACS,QAAQ,CAAC,CAAC;MACjDK,GAAG,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,EAAEV,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACjGI,UAAU,EAAE,IAAIjB,WAAW,CAAC;QAAEkB,KAAK,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAE,EAAE,CAACjB,UAAU,CAACS,QAAQ,CAAC;KACjF,CAAC;EARsF;EAUxFS,QAAQA,CAAA,GACR;EAEAC,SAASA,CAACL,GAAW;IACnB,MAAMM,GAAG,GAAG,4BAA4BN,GAAG,QAAQ;IACnD,IAAI,CAACV,IAAI,CAACiB,GAAG,CAACD,GAAG,CAAC,CAACE,SAAS,CAAEC,IAAS,IAAI;MACzC,IAAI,CAAChB,IAAI,CAACc,GAAG,CAAC,YAAY,CAAC,EAAEG,QAAQ,CAACD,IAAI,CAACR,UAAU,CAAC;IACxD,CAAC,CAAC;EACJ;EAEAU,eAAeA,CAAA;IACb,IAAI,IAAI,CAAClB,IAAI,CAACmB,KAAK,EAAE;MACnB,MAAMrB,MAAM,GAAW;QACrBG,IAAI,EAAE,IAAI,CAACD,IAAI,CAACc,GAAG,CAAC,MAAM,CAAE,CAACL,KAAM;QACnCJ,KAAK,EAAE,IAAI,CAACL,IAAI,CAACc,GAAG,CAAC,OAAO,CAAE,CAACL,KAAM;QACrCH,KAAK,EAAE,IAAI,CAACN,IAAI,CAACc,GAAG,CAAC,OAAO,CAAE,CAACL,KAAM;QACrCF,GAAG,EAAE,IAAI,CAACP,IAAI,CAACc,GAAG,CAAC,KAAK,CAAE,CAACL,KAAM;QACjCD,UAAU,EAAE,IAAI,CAACR,IAAI,CAACc,GAAG,CAAC,YAAY,CAAE,CAACL;OAC1C;MACD,IAAI,CAACV,OAAO,CAACqB,IAAI,CAACtB,MAAM,CAAC;MAEzB,IAAI,CAACE,IAAI,CAACqB,KAAK,EAAE;IACnB,CAAC,MAAM;MACLC,KAAK,CAAC,sBAAsB,CAAC;IAC/B;EACF;CACD;AAvCY3B,mBAAmB,GAAA4B,UAAA,EAL/BjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,EAIuCC,OAAA,IAAAC,MAAM,CAAClC,eAAe,CAAC,E,EAHnDC,mBAAmB,CAuC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}