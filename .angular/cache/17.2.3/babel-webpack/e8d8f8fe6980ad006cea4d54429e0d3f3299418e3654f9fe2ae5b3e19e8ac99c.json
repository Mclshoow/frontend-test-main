{"ast":null,"code":"import { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, booleanAttribute, Directive, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nclass MutationObserverFactory {\n  create(callback) {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n  static #_ = this.ɵfac = function MutationObserverFactory_Factory(t) {\n    return new (t || MutationObserverFactory)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MutationObserverFactory,\n    factory: MutationObserverFactory.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MutationObserverFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/** An injectable service that allows watching elements for changes to their content. */\nclass ContentObserver {\n  constructor(_mutationObserverFactory) {\n    this._mutationObserverFactory = _mutationObserverFactory;\n    /** Keeps track of the existing MutationObservers so they can be reused. */\n    this._observedElements = new Map();\n  }\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n  observe(elementOrRef) {\n    const element = coerceElement(elementOrRef);\n    return new Observable(observer => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  _observeElement(element) {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {\n        observer,\n        stream,\n        count: 1\n      });\n    } else {\n      this._observedElements.get(element).count++;\n    }\n    return this._observedElements.get(element).stream;\n  }\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  _unobserveElement(element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element).count--;\n      if (!this._observedElements.get(element).count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n  /** Clean up the underlying MutationObserver for the specified element. */\n  _cleanupObserver(element) {\n    if (this._observedElements.has(element)) {\n      const {\n        observer,\n        stream\n      } = this._observedElements.get(element);\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n  static #_ = this.ɵfac = function ContentObserver_Factory(t) {\n    return new (t || ContentObserver)(i0.ɵɵinject(MutationObserverFactory));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ContentObserver,\n    factory: ContentObserver.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContentObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], () => [{\n    type: MutationObserverFactory\n  }], null);\n})();\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = value;\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  /** Debounce interval for emitting the changes. */\n  get debounce() {\n    return this._debounce;\n  }\n  set debounce(value) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  constructor(_contentObserver, _elementRef, _ngZone) {\n    this._contentObserver = _contentObserver;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    /** Event emitted for each change in the element's content. */\n    this.event = new EventEmitter();\n    this._disabled = false;\n    this._currentSubscription = null;\n  }\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n  _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n  _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n  static #_ = this.ɵfac = function CdkObserveContent_Factory(t) {\n    return new (t || CdkObserveContent)(i0.ɵɵdirectiveInject(ContentObserver), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CdkObserveContent,\n    selectors: [[\"\", \"cdkObserveContent\", \"\"]],\n    inputs: {\n      disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"cdkObserveContentDisabled\", \"disabled\", booleanAttribute],\n      debounce: \"debounce\"\n    },\n    outputs: {\n      event: \"cdkObserveContent\"\n    },\n    exportAs: [\"cdkObserveContent\"],\n    standalone: true,\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkObserveContent, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkObserveContent]',\n      exportAs: 'cdkObserveContent',\n      standalone: true\n    }]\n  }], () => [{\n    type: ContentObserver\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    event: [{\n      type: Output,\n      args: ['cdkObserveContent']\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        alias: 'cdkObserveContentDisabled',\n        transform: booleanAttribute\n      }]\n    }],\n    debounce: [{\n      type: Input\n    }]\n  });\n})();\nclass ObserversModule {\n  static #_ = this.ɵfac = function ObserversModule_Factory(t) {\n    return new (t || ObserversModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ObserversModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MutationObserverFactory]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ObserversModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkObserveContent],\n      exports: [CdkObserveContent],\n      providers: [MutationObserverFactory]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };","map":{"version":3,"names":["coerceElement","coerceNumberProperty","i0","Injectable","EventEmitter","booleanAttribute","Directive","Output","Input","NgModule","Observable","Subject","debounceTime","MutationObserverFactory","create","callback","MutationObserver","_","ɵfac","MutationObserverFactory_Factory","t","_2","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","ContentObserver","constructor","_mutationObserverFactory","_observedElements","Map","ngOnDestroy","forEach","element","_cleanupObserver","observe","elementOrRef","observer","stream","_observeElement","subscription","subscribe","unsubscribe","_unobserveElement","has","mutations","next","characterData","childList","subtree","set","count","get","disconnect","complete","delete","ContentObserver_Factory","ɵɵinject","CdkObserveContent","disabled","_disabled","value","_unsubscribe","_subscribe","debounce","_debounce","_contentObserver","_elementRef","_ngZone","event","_currentSubscription","ngAfterContentInit","runOutsideAngular","pipe","CdkObserveContent_Factory","ɵɵdirectiveInject","ElementRef","NgZone","ɵdir","ɵɵdefineDirective","selectors","inputs","ɵɵInputFlags","HasDecoratorInputTransform","outputs","exportAs","standalone","features","ɵɵInputTransformsFeature","selector","alias","transform","ObserversModule","ObserversModule_Factory","ɵmod","ɵɵdefineNgModule","_3","ɵinj","ɵɵdefineInjector","providers","imports","exports"],"sources":["D:/Aplicativos/teste front/código teste/frontend-test-main/node_modules/@angular/cdk/fesm2022/observers.mjs"],"sourcesContent":["import { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, booleanAttribute, Directive, Output, Input, NgModule } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nclass MutationObserverFactory {\n    create(callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MutationObserverFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MutationObserverFactory, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MutationObserverFactory, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** An injectable service that allows watching elements for changes to their content. */\nclass ContentObserver {\n    constructor(_mutationObserverFactory) {\n        this._mutationObserverFactory = _mutationObserverFactory;\n        /** Keeps track of the existing MutationObservers so they can be reused. */\n        this._observedElements = new Map();\n    }\n    ngOnDestroy() {\n        this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n    }\n    observe(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        return new Observable((observer) => {\n            const stream = this._observeElement(element);\n            const subscription = stream.subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n                this._unobserveElement(element);\n            };\n        });\n    }\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     */\n    _observeElement(element) {\n        if (!this._observedElements.has(element)) {\n            const stream = new Subject();\n            const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n            if (observer) {\n                observer.observe(element, {\n                    characterData: true,\n                    childList: true,\n                    subtree: true,\n                });\n            }\n            this._observedElements.set(element, { observer, stream, count: 1 });\n        }\n        else {\n            this._observedElements.get(element).count++;\n        }\n        return this._observedElements.get(element).stream;\n    }\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     */\n    _unobserveElement(element) {\n        if (this._observedElements.has(element)) {\n            this._observedElements.get(element).count--;\n            if (!this._observedElements.get(element).count) {\n                this._cleanupObserver(element);\n            }\n        }\n    }\n    /** Clean up the underlying MutationObserver for the specified element. */\n    _cleanupObserver(element) {\n        if (this._observedElements.has(element)) {\n            const { observer, stream } = this._observedElements.get(element);\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this._observedElements.delete(element);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ContentObserver, deps: [{ token: MutationObserverFactory }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ContentObserver, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ContentObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: MutationObserverFactory }] });\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nclass CdkObserveContent {\n    /**\n     * Whether observing content is disabled. This option can be used\n     * to disconnect the underlying MutationObserver until it is needed.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._disabled ? this._unsubscribe() : this._subscribe();\n    }\n    /** Debounce interval for emitting the changes. */\n    get debounce() {\n        return this._debounce;\n    }\n    set debounce(value) {\n        this._debounce = coerceNumberProperty(value);\n        this._subscribe();\n    }\n    constructor(_contentObserver, _elementRef, _ngZone) {\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /** Event emitted for each change in the element's content. */\n        this.event = new EventEmitter();\n        this._disabled = false;\n        this._currentSubscription = null;\n    }\n    ngAfterContentInit() {\n        if (!this._currentSubscription && !this.disabled) {\n            this._subscribe();\n        }\n    }\n    ngOnDestroy() {\n        this._unsubscribe();\n    }\n    _subscribe() {\n        this._unsubscribe();\n        const stream = this._contentObserver.observe(this._elementRef);\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n        // Consider brining it back inside the zone next time we're making breaking changes.\n        // Bringing it back inside can cause things like infinite change detection loops and changed\n        // after checked errors if people's code isn't handling it properly.\n        this._ngZone.runOutsideAngular(() => {\n            this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n        });\n    }\n    _unsubscribe() {\n        this._currentSubscription?.unsubscribe();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkObserveContent, deps: [{ token: ContentObserver }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkObserveContent, isStandalone: true, selector: \"[cdkObserveContent]\", inputs: { disabled: [\"cdkObserveContentDisabled\", \"disabled\", booleanAttribute], debounce: \"debounce\" }, outputs: { event: \"cdkObserveContent\" }, exportAs: [\"cdkObserveContent\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkObserveContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkObserveContent]',\n                    exportAs: 'cdkObserveContent',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: ContentObserver }, { type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { event: [{\n                type: Output,\n                args: ['cdkObserveContent']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkObserveContentDisabled', transform: booleanAttribute }]\n            }], debounce: [{\n                type: Input\n            }] } });\nclass ObserversModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ObserversModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: ObserversModule, imports: [CdkObserveContent], exports: [CdkObserveContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ObserversModule, providers: [MutationObserverFactory] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: ObserversModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkObserveContent],\n                    exports: [CdkObserveContent],\n                    providers: [MutationObserverFactory],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkObserveContent, ContentObserver, MutationObserverFactory, ObserversModule };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}